# HG changeset patch
# User andrew
# Date 1375922936 -3600
# Node ID 6f1a1e26f52119ee7b8ce91bf425a726935e02c3
# Parent  64c0a3fb78cdf25cd5f8515446b058aac9b5cb7b
Fix merge issues caused by faulty AOT 8010118 patch.

diff -r 64c0a3fb78cd -r 6f1a1e26f521 src/share/classes/sun/reflect/misc/ReflectUtil.java
--- openjdk/jdk/src/share/classes/sun/reflect/misc/ReflectUtil.java	Tue Jul 02 13:23:35 2013 -0700
+++ openjdk/jdk/src/share/classes/sun/reflect/misc/ReflectUtil.java	Thu Aug 08 01:48:56 2013 +0100
@@ -47,14 +47,6 @@
         return cls.newInstance();
     }
 
-    public static void ensureClassAccess(Class clazz)
-           throws IllegalAccessException
-    {
-        int mod = clazz.getModifiers();
-        if ( ! Modifier.isPublic(mod) ){
-            throw new IllegalAccessException("Class is not public and can't be instantiated");
-        }
-    }
     /*
      * Reflection.ensureMemberAccess is overly-restrictive
      * due to a bug. We awkwardly work around it for now.
diff -r 64c0a3fb78cd -r 6f1a1e26f521 src/share/native/sun/reflect/Reflection.c
--- openjdk/jdk/src/share/native/sun/reflect/Reflection.c	Tue Jul 02 13:23:35 2013 -0700
+++ openjdk/jdk/src/share/native/sun/reflect/Reflection.c	Thu Aug 08 01:48:56 2013 +0100
@@ -37,9 +37,7 @@
 JNIEXPORT jclass JNICALL Java_sun_reflect_Reflection_getCallerClass0
 (JNIEnv *env, jclass unused, jint depth)
 {
-    // Until there is hotspot @CallerSensitive support,
-    // depth must always be 2 to get the immediate caller
-    return JVM_GetCallerClass(env, 2);
+    return JVM_GetCallerClass(env, depth);
 }
 
 JNIEXPORT jint JNICALL Java_sun_reflect_Reflection_getClassAccessFlags

