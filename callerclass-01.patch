# HG changeset patch
# User mchung
# Date 1372201967 25200
# Node ID 6ae667b931d5389914a96c94117362eb87f92431
# Parent  8c388c89a45c4220d05fb71d6291d9d1914f1c32
8016814: sun.reflect.Reflection.getCallerClass returns the frame off by 1
Reviewed-by: jrose, alanb, chegar, twisti

diff -r 8c388c89a45c -r 6ae667b931d5 src/share/classes/sun/reflect/Reflection.java
--- openjdk/jdk/src/share/classes/sun/reflect/Reflection.java	Thu Jul 25 20:48:39 2013 +0100
+++ openjdk/jdk/src/share/classes/sun/reflect/Reflection.java	Tue Jun 25 16:12:47 2013 -0700
@@ -65,7 +65,7 @@
     @Deprecated
     @CallerSensitive
     public static Class getCallerClass(int depth) {
-        return getCallerClass0(depth);
+        return getCallerClass0(depth+1);
     }
 
     // If the VM enforces getting caller class with @CallerSensitive,
diff -r 8c388c89a45c -r 6ae667b931d5 test/sun/reflect/GetCallerClass.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ openjdk/jdk/test/sun/reflect/GetCallerClass.java	Tue Jun 25 16:12:47 2013 -0700
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @bug 8016814
+ * @summary Test sun.reflect.Reflection.getCallerClass(int)
+ * @compile -XDignore.symbol.file GetCallerClass.java
+ * @run main GetCallerClass
+ */
+
+public class GetCallerClass {
+    public static void main(String[] args) throws Exception {
+        Class<?> c = Temp.test();
+        if (c != GetCallerClass.class) {
+            throw new RuntimeException("Incorrect caller: " + c);
+        }
+    }
+
+    @sun.reflect.CallerSensitive
+    public Class<?> getCallerClass() {
+        // 0: Reflection 1: getCallerClass 2: Temp.test 3: main
+        return sun.reflect.Reflection.getCallerClass(3);
+    }
+
+    static class Temp {
+        public static Class<?> test() {
+            return new GetCallerClass().getCallerClass();
+        }
+    }
+}

